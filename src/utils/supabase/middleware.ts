import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
    console.log('üî• MIDDLEWARE RUNNING:', request.nextUrl.pathname)

    let supabaseResponse = NextResponse.next({
        request: {
            headers: request.headers,
        },
    })

    const supabase = createServerClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                getAll() {
                    return request.cookies.getAll()
                },
                setAll(cookiesToSet) {
                    cookiesToSet.forEach(({ name, value }) =>
                        request.cookies.set(name, value)
                    )
                    supabaseResponse = NextResponse.next({
                        request: {
                            headers: request.headers,
                        },
                    })
                    cookiesToSet.forEach(({ name, value, options }) =>
                        supabaseResponse.cookies.set(name, value, options)
                    )
                },
            },
        }
    )

    const pathname = request.nextUrl.pathname
    const isAuthRoute = pathname.startsWith('/auth')
    const isAdminRoute = pathname.startsWith('/admin')
    const isMentorRoute = pathname.startsWith('/mentor_page')
    const isHomePage = pathname === '/'

    console.log('Middleware check:', {
        pathname,
        isAuthRoute,
        isAdminRoute,
        isMentorRoute,
        isHomePage
    })

    try {
        // ‚úÖ L·∫§Y USER T·ª™ SUPABASE
        const {
            data: { user },
            error
        } = await supabase.auth.getUser()

        console.log('User check:', {
            hasUser: !!user,
            error: !!error,
            userId: user?.id,
            emailConfirmed: user?.email_confirmed_at ? 'Yes' : 'No'
        })

        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        if (!user || error) {
            console.log('‚ùå No authenticated user')

            // Cho ph√©p truy c·∫≠p auth routes
            if (isAuthRoute) {
                console.log('‚úÖ Allowing auth route for unauthenticated user')
                return supabaseResponse
            }

            // Ch·∫∑n protected routes
            if (isAdminRoute || isMentorRoute) {
                console.log('‚ùå Blocking protected route - redirecting to login')
                const url = request.nextUrl.clone()
                url.pathname = '/auth/login'
                url.searchParams.set('redirectTo', pathname)
                return NextResponse.redirect(url)
            }

            // Cho ph√©p c√°c route public kh√°c
            console.log('‚úÖ Allowing public route')
            return supabaseResponse
        }

        // ‚úÖ ƒê√É ƒêƒÇNG NH·∫¨P - KI·ªÇM TRA EMAIL VERIFICATION
        if (!user.email_confirmed_at) {
            console.log('‚ö†Ô∏è User logged in but email not verified')

            // N·∫øu ch∆∞a verify email v√† kh√¥ng ·ªü trang verify, redirect ƒë·∫øn verify
            if (!pathname.startsWith('/auth/verify-email') && !pathname.startsWith('/auth/logout')) {
                console.log('üîÑ Redirecting to email verification')
                const url = request.nextUrl.clone()
                url.pathname = '/auth/verify-email'
                url.searchParams.set('email', user.email || '')
                return NextResponse.redirect(url)
            }

            // Cho ph√©p ·ªü l·∫°i trang verify ho·∫∑c logout
            return supabaseResponse
        }

        // ‚úÖ L·∫§Y ROLE T·ª™ USER_METADATA (AN TO√ÄN V·ªöI SUPABASE)
        const userRole = user.user_metadata?.role || 'user'
        console.log('‚úÖ User authenticated and verified:', {
            email: user.email,
            role: userRole,
            metadata: user.user_metadata
        })

        // ‚úÖ KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P ADMIN
        if (isAdminRoute) {
            if (userRole !== 'admin' && userRole !== 'superadmin') {
                console.log(`‚ùå Access denied: User role '${userRole}' insufficient for admin route`)
                const url = request.nextUrl.clone()
                url.pathname = '/'
                url.searchParams.set('error', 'insufficient_permissions')
                return NextResponse.redirect(url)
            }
            console.log('‚úÖ Admin access granted for role:', userRole)
        }

        // ‚úÖ KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P MENTOR
        if (isMentorRoute) {
            if (userRole !== 'mentor' && userRole !== 'admin' && userRole !== 'superadmin') {
                console.log(`‚ùå Access denied: User role '${userRole}' insufficient for mentor route`)
                const url = request.nextUrl.clone()
                url.pathname = '/'
                url.searchParams.set('error', 'insufficient_permissions')
                return NextResponse.redirect(url)
            }
            console.log('‚úÖ Mentor access granted for role:', userRole)
        }

        // ‚úÖ REDIRECT T·ª™ AUTH ROUTES CHO USER ƒê√É ƒêƒÇNG NH·∫¨P V√Ä VERIFIED
        if (isAuthRoute && !pathname.startsWith('/auth/logout') && !pathname.startsWith('/auth/verify-email')) {
            console.log('üîÑ Redirecting verified user from auth route')
            const url = request.nextUrl.clone()

            // Redirect based on role
            if (userRole === 'admin' || userRole === 'superadmin') {
                url.pathname = '/admin'
            } else {
                url.pathname = '/'
            }

            // Preserve any redirect parameter
            const redirectTo = request.nextUrl.searchParams.get('redirectTo')
            if (redirectTo && !redirectTo.startsWith('/auth')) {
                url.pathname = redirectTo
            }

            return NextResponse.redirect(url)
        }

        console.log('‚úÖ Access granted to:', pathname)
        return supabaseResponse

    } catch (error) {
        console.error('‚ùå Middleware error:', error)

        // N·∫øu c√≥ l·ªói v√† c·ªë truy c·∫≠p protected routes
        if (isAdminRoute || isMentorRoute) {
            console.log('‚ùå Error in middleware - redirecting to login')
            const url = request.nextUrl.clone()
            url.pathname = '/auth/login'
            url.searchParams.set('error', 'auth_error')
            return NextResponse.redirect(url)
        }

        // Cho ph√©p truy c·∫≠p c√°c route kh√°c n·∫øu c√≥ l·ªói
        return supabaseResponse
    }
}